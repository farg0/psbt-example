package main

import (
	"bytes"
	"encoding/hex"
	"io"
	"log"
	"net/http"

	"github.com/btcsuite/btcd/btcutil/psbt"
	"github.com/btcsuite/btcd/chaincfg/chainhash"
	"github.com/btcsuite/btcd/wire"
)

var CUTestAmountData = map[string]int64{
	"amount1": 149990000,
	"amount2": 100000000,
	"amount3": 200000000,
}

var CUTestHexData = map[string]string{
	"scriptPubkey1":  "0014d85c2b71d0060b09c9886aeb815e50991dda124d",
	"scriptPubkey2":  "001400aea9a2e5f0f876a588df5546e8742d1d87008f",
	"txid1":          "75ddabb27b8845f5247975c8a5ba7c6f336c4570708ebe230caf6db5217ae858",
	"txid2":          "1dea7cd05979072a3578cab271c02244ea8a090bbb46aa680a65ecd027048d83",
	"COPsbtHex":      "70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f000000000000000000",
	"NonWitnessUtxo": "0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000",
	"WitnessUtxo":    "00c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e887",
	// After adding witnessutxo and nonwitness utxo to inputs:
	"UOPsbtHex":           "70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e887000000",
	"Input1RedeemScript":  "5221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae",
	"Input2RedeemScript":  "00208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903",
	"Input2WitnessScript": "522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae",
	// After adding redeemscripts and witness scripts to inputs:
	"UOPsbtHex2": "70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae0001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88701042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae000000",
	// After adding bip32 derivations to inputs and outputs:
	"UOPsbtHex3": "70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88701042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000",
	//After adding sighash types to inputs
	"UOPsbtHex4": "70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8870103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000",
}

// psbt creator
func psbtHandler1(w http.ResponseWriter, req *http.Request) {
	spkOut1, err := hex.DecodeString(CUTestHexData["scriptPubkey1"])
	if err != nil {
		log.Println("Error: %v", err)
	}
	spkOut2, err := hex.DecodeString(CUTestHexData["scriptPubkey2"])
	if err != nil {
		log.Println("Error: %v", err)
	}
	out1 := wire.NewTxOut(CUTestAmountData["amount1"], spkOut1)
	out2 := wire.NewTxOut(CUTestAmountData["amount2"], spkOut2)
	outputs := []*wire.TxOut{out1, out2}
	hash1, err := chainhash.NewHashFromStr(CUTestHexData["txid1"])
	if err != nil {
		log.Println("Error: %v", err)
	}
	prevOut1 := wire.NewOutPoint(hash1, uint32(0))
	hash2, err := chainhash.NewHashFromStr(CUTestHexData["txid2"])
	if err != nil {
		log.Println("Error: %v", err)
	}
	prevOut2 := wire.NewOutPoint(hash2, uint32(1))
	inputs := []*wire.OutPoint{prevOut1, prevOut2}

	// Check creation fails with invalid sequences:
	nSequences := []uint32{wire.MaxTxInSequenceNum}
	_, err = psbt.New(inputs, outputs, int32(3), uint32(0), nSequences)
	if err == nil {
		log.Println("Did not error when creating transaction with " +
			"invalid nSequences")
	}
	nSequences = append(nSequences, wire.MaxTxInSequenceNum)

	// Check creation fails with invalid version
	_, err = psbt.New(inputs, outputs, int32(0), uint32(0), nSequences)
	if err == nil {
		log.Println("Did not error when creating transaction with " +
			"invalid version (3)")
	}

	// Use valid data to create:
	cPsbt, err := psbt.New(inputs, outputs, int32(2), uint32(0), nSequences)
	base64Str, _ := cPsbt.B64Encode()
	io.WriteString(w, base64Str)
}

// psbt updater
func psbtHandler2(w http.ResponseWriter, req *http.Request) {
	updater, err := NewUpdater(cPsbt)
	if err != nil {
		t.Fatalf("Unable to create Updater object")
	}
	tx := wire.NewMsgTx(2)
	nonWitnessUtxoHex, err := hex.DecodeString(
		CUTestHexData["NonWitnessUtxo"])
	if err != nil {
		t.Fatalf("Unable to decode hex: %v", err)
	}
	err = tx.Deserialize(bytes.NewReader(nonWitnessUtxoHex))
	if err != nil {
		t.Fatalf("Error deserializing transaction: %v", err)
	}
	witnessUtxoHex, err := hex.DecodeString(
		CUTestHexData["WitnessUtxo"])
	if err != nil {
		t.Fatalf("Unable to decode hex: %v", err)
	}
	txout := wire.TxOut{Value: CUTestAmountData["amount3"],
		PkScript: witnessUtxoHex[9:]}
	err = updater.AddInNonWitnessUtxo(tx, 0)
	if err != nil {
		t.Fatalf("Unable to add NonWitness Utxo to inputs: %v", err)
	}
	err = updater.AddInWitnessUtxo(&txout, 1)
	if err != nil {
		t.Fatalf("Unable to add Witness Utxo to inputs: %v", err)
	}

	b.Reset()

}

func psbtHandler3() {}

func main() {

	helloHandler := func(w http.ResponseWriter, req *http.Request) {
		io.WriteString(w, "Hello, world!\n")
	}

	http.HandleFunc("/hello", helloHandler)
	http.HandleFunc("/psbt-step1", psbtHandler1)
	http.HandleFunc("/psbt-step2", psbtHandler2)

	log.Println("Listing for requests at http://localhost:8000/hello")
	log.Fatal(http.ListenAndServe(":8000", nil))
}
